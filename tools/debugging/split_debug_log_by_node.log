#!/bin/sh

# This script will read a `raiden-debug*.log` file and fiter the logs by the
# `node` attribute. It is just a bit more convinient for debugging.
#
# Sadly this cannot be done with the logging system in python without a lot of
# hacking around, because the log instances are always global, shared across
# all the nodes in the test, which are executed within the same process
# (Running all nodes on the same process makes it easier to use a debugger).

usage() {
    echo '$0 <raiden-debug-log> <output-dir>';
    exit 1
}

full_log=$1
out_dir=$2

[ $# -ne 2 ] && {
    echo 'Invalid number of arguments.'
    echo
    usage
}

[ ! -f ${full_log} ] && {
    echo "The argument '${full_log}' must be a log file"
    echo
    usage
}

[ ! -e ${out_dir} ] && {
    mkdir -p ${out_dir};
}

[ ! -d ${out_dir} ] && {
    echo "The argument '${out_dir}' must be a directory"
    echo
    usage
}

for node_address in $(cat ${full_log} | jq -r '.node' | sort -u | grep -v null); do
    jq "select(.node==\"${node_address}\")" $full_log > ${out_dir}/${node_address}.log
done

jq "select(.node==null)" $full_log > ${out_dir}/unknown.log
