- name: Install python package
  pip:
    name:
      - docker

- name: Get info
  docker_facts:
  failed_when: no

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 86400
  when: docker is not defined or docker['ServerVersion'] != docker_version

- name: "Docker requirements"
  apt:
    pkg: "{{ item }}"
  with_items:
    - apt-transport-https
    - ca-certificates
    - software-properties-common
  when: docker is not defined

- name: Add apt repo key
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
  when: docker is not defined

- name: Add apt repo
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial {{ docker_channel|default('stable') }}"
    update_cache: yes

- set_fact:
    docker_version_ubuntu: "{{ '{0}*'.format(docker_version.replace('-', '~'))}}"
  when: docker_version is defined

- name: Install package
  apt:
    pkg: "docker-ce{{ '=' + docker_version_ubuntu if docker_version_ubuntu is defined else '' }}"
  when: docker is not defined or (docker_version is defined and docker['ServerVersion'] != docker_version)

- name: User {{ ansible_user }} in docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  register: user_added_group_docker

# The following doesn't work until https://github.com/ansible/ansible/issues/24794 is fixed :(
#- name: Force ssh reconnect to apply group change
#  meta: reset_connection
#  when: user_added_group_docker|changed

# That's why we use this ugly hack:
- name: "Reboot to work around ansible issue #24794 :("
  become: yes
  shell: "sleep 2 && /sbin/shutdown -r now"
  async: 1
  poll: 0
  when: user_added_group_docker|changed

- name: Wait for host to come back up
  become: no
  wait_for:
    host: "{{ inventory_hostname }}"
    port: 22
    state: started
    delay: 5
    connect_timeout: 1
    timeout: 120
  delegate_to: 127.0.0.1
  when: user_added_group_docker|changed

- name: Validate ECR login
  become: no
  docker_image:
    name: "{{ docker_repo_empty }}"
    state: present
    force: yes
  ignore_errors: yes
  changed_when: no
  register: login_valid

- name: Get ECR repo login
  become: no
  command: aws ecr get-login --no-include-email
  delegate_to: 127.0.0.1
  run_once: true
  register: ecr_repo_login

- name: Login to ECR
  become: no
  command: "{{ ecr_repo_login.stdout }}"
  when: login_valid|failed

- name: Prune old images
  command: docker image prune --all --force
