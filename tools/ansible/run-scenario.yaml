- hosts: tag_Name_Scenario
  name: start geth
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - start_geth

  tasks:
    # Collect instance id: http://stackoverflow.com/a/27307254
    - action: ec2_facts

    - name: stop geth (KILL)
      shell: "killall -15 geth"
      ignore_errors: yes

    - name: wipe geth blockchaindata (if present)
      file:
        path: "{{ geth_datadir }}/{{ item }}"
        state: absent
      with_items:
        - chaindata
        - dapp

    - name: init geth
      shell:
        cmd: "geth --datadir {{ geth_datadir }} init {{ geth_datadir }}/genesis.json"

      # run geth in background and redirect output to ~/geth.log
    - name: run geth command
      shell:
        cmd: "daemon -o {{ user_home }}/geth.log {{ geth_datadir }}/start.sh"


- hosts: tag_Name_Scenario
  name: start raiden
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - start_raiden
  vars:
    scenario_runner: "{{ user_home }}/raiden/tools/scenario_runner.py"

  tasks:
    # Collect instance id: http://stackoverflow.com/a/27307254
    - action: ec2_facts

    - name: overwrite scenario_runner.py from local version (for testing)
      copy:
        src: "../scenario_runner.py"
        dest: "{{ scenario_runner }}"

    - name: configured raiden_ports
      find:
        patterns: "4*"
        paths: "{{ user_home }}"
        file_type: directory
      register: dirs

    - name: set fact for ports
      set_fact:
        raiden_ports: "{{ dirs.files | map(attribute='path') | map('basename') | list }}"

    - name: remove all state information
      file:
        path: "{{ user_home }}/state"
        state: absent
      ignore_errors: yes

    - name: create state directory
      file:
        path: "{{ user_home }}/state"
        state: directory

    - name: remove stage files
      file:
        path: "{{ user_home }}/raiden-*.stage*"
        state: absent
      ignore_errors: yes

    - name: update repository if asked (set `-e force_pull=True`)
      shell:
        cmd: "git pull --rebase"
        chdir: "{{ raiden_dir }}"
      when: force_pull is defined

    - name: execute raidens asynchronously
      shell:
        cmd: "{{ ansible_env.HOME }}/raidenvenv/bin/python {{ scenario_runner }} $(cat {{ ansible_env.HOME }}/raiden_flags.txt) --privatekey=$(cat {{ ansible_env.HOME }}/{{ item }}/privatekey.txt) --listen-address={{ ansible_ec2_local_ipv4 }}:{{ item }} --scenario={{ ansible_env.HOME }}/{{ item }}/scenario.json --logging=':WARNING' --logfile=raiden-{{ item }}.log --stage-prefix=raiden-{{ item }} --results-filename={{ ansible_ec2_public_ipv4 }}-{{ item }}.json"
        chdir: "{{ user_home }}"
      async: 1200
      poll: 0
      with_items:
        - "{{ raiden_ports }}"

    - name: wait for raidens initialization (this may take a long time...)
      wait_for:
        path: "{{ user_home }}/raiden-{{ item }}.stage1"
      with_items:
        - "{{ raiden_ports }}"

    - name: signal all nodes to start sending messages
      shell:
        cmd: "pgrep -a python | grep raiden | cut -d' ' -f1 | xargs kill --signal=SIGUSR2"
      ignore_errors: True

    - name: wait for raidens to finish transfers
      wait_for:
        path: "{{ user_home }}/raiden-{{ item }}.stage2"
      with_items:
        - "{{ raiden_ports }}"

    - name: signal all nodes to write results
      shell:
        cmd: "pgrep -a python | grep raiden | cut -d' ' -f1 | xargs kill --signal=SIGUSR2"
      ignore_errors: True

    - name: wait for raidens to write results
      wait_for:
        path: "{{ user_home }}/raiden-{{ item }}.stage3"
      with_items:
        - "{{ raiden_ports }}"

    - name: stop raiden nodes
      shell:
        cmd: "pgrep -a python | grep raiden | cut -d' ' -f1 | xargs kill"
      ignore_errors: True

    - name: stop geth
      shell:
        cmd: "killall geth"
      ignore_errors: True

    - name: fetch results files
      fetch:
        src: "{{ ansible_ec2_public_ipv4 }}-{{ item }}.json"
        dest: "results/"
        flat: yes
      with_items:
        - "{{ raiden_ports }}"

- hosts: tag_Name_Scenario
  name: terminate
  remote_user: "{{ remote_user }}"
  gather_facts: true
  roles:
    - scenario
    - common
  tags:
    - terminate

  tasks:
    - include: roles/scenario/tasks/terminate.yaml
