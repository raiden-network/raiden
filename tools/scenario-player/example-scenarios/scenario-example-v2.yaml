version: 2

settings:
  ## Mail notification address - needs a mailgun api key to be given on the command line
  #notify: "raiden-scenario-basic@example.com"

  ## Gas price to use, either `fast`, `medium` or an integer (in gwei)
  gas_price: "fast"

  ## Chain to use
  ## Named chains given on the scenario player command line
  ## Defaults to 'any' - use any available one
  #chain: any
  ## Other examples
  #chain: ropsten
  #chain: kovan
  #chain: rinkeby
  #chain: raiden_clique
  #chain: raiden_aura

token:
  ## To use an existing token give an address
  #address: "0xabcdef0123456789abcdef0123456789abcdef01"

  ## To deploy a new one remove the `address` key
  ## Optionally parameters: give name and symbol, both will be autogenerated if not given
  ## name - Token name, default: autogenerated
  ## symbol - Token symbol, default: autogenerated
  ## decimals - Token decimals, default: 0
  ## balance_min - Minimum node balance, default: 5000
  ## reuse - remember the token and reuse it for the next run of this scenario, default: false
  #name: "Some token"
  #symbol: "STKN"
  #decimals: 18
  #balance_min: 5000
  #reuse: true

nodes:
  ## Mode, either `managed` or `external`
  # - managed: The scenario player will manage the Raiden nodes
  # - external: The nodes need to be managed externally (see v1 for examples)
  mode: managed
  count: 3
  ## Raiden version to use, default: 'LATEST' uses the latest nightly release
  #raiden_version: LATEST
  #raiden_version: v0.12.0
  ## Options to apply to all nodes
  ## Option names correspond to Raiden cli options without the leading double dash (`--`)
  default_options:
    gas-price: fast
    #registry-contract-address: "0xbfa863Ac58a3E0A82B58a8e958F2752Bfb573388"
    #discovery-contract-address: "0xb2646EB8270a4de7451f6F7b259FdE17DBCeedc9"
    #secret-registry-contract-address: "0xA5c882f09c3DE551d76dcDE08890fAa0dD1F29E3"
  ## Per-node option overrides
  #node_options:
  #  0:
  #    matrix-server: https://transport01.raiden.network
  #  1:
  #    matrix-server: https://transport03.raiden.network

## Available task types:
## - serial
## - parallel
## - open_channel
## - close_channel
## - deposit
## - transfer
## - stop_node
## - kill_node
## - start_node
## - update_node_options
## - assert
## - assert_all
## - wait
## - join_network
## - leave_network

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 10, settle_timeout: 100}
            - open_channel: {from: 1, to: 2, total_deposit: 10, expected_http_status: "(2..|409)"}
      - parallel:
          name: "Assert after open"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0,  balance: 0,  state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0,  balance: 0,  state: "opened"}
      - stop_node: 2
      - start_node: 2
      - parallel:
          name: "Deposit reverse"
          tasks:
            - deposit: {from: 1, to: 0, total_deposit: 10}
            - deposit: {from: 2, to: 1, total_deposit: 10}
      - parallel:
          name: "Assert after deposit"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 10, state: "opened"}
      - parallel:
          name: "Transfer"
          tasks:
            - transfer: {from: 0, to: 1, amount: 1}
            - transfer: {from: 1, to: 2, amount: 1}
      - wait: 2
      - parallel:
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 9,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 11, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 9,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 11, state: "opened"}
      - transfer: {from: 0, to: 2, amount: 1}
      - wait: 2
      - parallel:
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 8,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 12, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 8,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 12, state: "opened"}

# More examples:
#      ## All Raiden API tasks take a `timeout` parameter. If the timeout passes without the request returning successfully the task will fail.
#      - transfer: {from: 0, to: 1, amount: 1, timeout: 30}
#      ## Node options can be updated during a scenario run (but only while nodes are stopped):
#      - stop_node: 0
#      - update_node_options: {node: 0, options: {matrix-server: "https://..."}}
#      - start_node: 0
#      ## Assert on multiple channels without knowing the explicit peers
#      - assert_all: {from: 0, count: 2, balances: [10, 10], total_deposits: [10, 10], states: ['opened', 'opened']}
#      ## Open channel to arbitrary address
#      - open_channel: {from: 0, to: '0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa', total_deposit: 10}
#      - join_network: {funds: 10, initial_channel_target: 3, joinable_funds_target: 0.5}
#      - parallel:
#          tasks:
#            # Need to use actual offsets here as they are formatted directly into the commands
#            - stop_node: 1
#            - stop_node: 2
#            - stop_node: 3
#      - wait: 5
#      - parallel:
#          tasks:
#            # Need to use actual offsets here as they are formatted directly into the commands
#            - start_node: 1
#            - start_node: 2
#            - start_node: 3

#      - parallel:
#          repeat: 5
#          tasks:
#            - serial:
#                tasks:
#                  - transfer: {amount: 5, from: 0, to: 2}
#                  - stop_node: 1
#                  - wait: 1
#                  - start_node: 1
#            - transfer: {amount: 10, from: 1, to: 2}
#      - assert: {from: 0, to: 1, total_deposit: 100, balance: 5, state: "opened"}
#      - parallel:
#          tasks:
#            - close_channel: {from: 0, to: 1}
#            - close_channel: {from: 1, to: 2}
#      - assert: {from: 0, to: 1, total_deposit: 100, balance: 5, state: "closed"}

# Status code matching (int or regex):
#      - open_channel: {from: 0, to: 1}
#      - open_channel: {from: 0, to: 1, expected_http_status: 409}
#      - open_channel: {from: 0, to: 1, expected_http_status: '4.9'}
