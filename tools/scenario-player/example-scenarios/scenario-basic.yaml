settings:
  ## Mail notification address - needs a mailgun api key to be given on the command line
  #notify: "raiden-scenario-basic@example.com"

  ## Gas price to use, either `fast`, `medium` or an integer (in gwei)
  gas_price: "fast"

  ## Protocol to use to connect to the Raiden nodes, default: "http"
  #protocol: "https"

token:
  ## To re-use an existing token give an address
  #address: "0xabcdef0123456789abcdef0123456789abcdef01"

  ## To deploy a new one remove the `address` key
  ## Optionally parameters:give name and symbol, both will be autogenerated if not given
  ## name - Token name, default: autogenerated
  ## symbol - Token symbol, default: autogenerated
  ## decimals - Token decimals, default: 0
  ## balance_min - Minimum node balance, default: 5000
  #name: "Some token"
  #symbol: "STKN"
  #decimals: 18
  #balance_min: 50000000


nodes:
  commands:
    #start: "docker start raiden_{:02d}"
    #stop: "docker stop raiden_{:02d}"
    #kill: "docker kill raiden_{:02d}"
    stop: "pkill -f '127.0.0.1:50{:02d}'"
    kill: "pkill -9 -f '127.0.0.1:50{:02d}'"
    start: "raiden --config-file raiden_{0:02d}.toml --api-address 127.0.0.1:50{0:02d}"
  range:
    first: 1
    last: 3
    template: "localhost:50{:02d}"
  ## Alternatively give an explicit list:
  #list:
  #  - node1
  #  - node2
  #  - node3

## Available task types:
## - serial
## - parallel
## - open_channel
## - close_channel
## - deposit
## - transfer
## - stop_node
## - kill_node
## - start_node
## - assert
## - wait
## - join_network
## - leave_network

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 10}
            - open_channel: {from: 1, to: 2, total_deposit: 10}
      - parallel:
          name: "Assert after open"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0,  balance: 0,  state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0,  balance: 0,  state: "opened"}
      - parallel:
          name: "Deposit reverse"
          tasks:
            - deposit: {from: 1, to: 0, total_deposit: 10}
            - deposit: {from: 2, to: 1, total_deposit: 10}
      - parallel:
          name: "Assert after deposit"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 10, state: "opened"}
      - parallel:
          name: "Transfer"
          tasks:
            - transfer: {from: 0, to: 1, amount: 1}
            - transfer: {from: 1, to: 2, amount: 1}
      - wait: 2
      - parallel:
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 9,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 11, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 9,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 11, state: "opened"}
      - transfer: {from: 0, to: 2, amount: 1}
      - wait: 2
      - parallel:
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 8,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 10, balance: 12, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 8,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 10, balance: 12, state: "opened"}

# More examples:
#      ## Assert on multiple channels without knowing the explicit peers
#      - assert_all: {from: 0, count: 2, balances: [10, 10], total_deposits: [10, 10], states: ['opened', 'opened']}
#      ## Open channel to arbitrary address
#      - open_channel: {from: 0, to: '0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa', total_deposit: 10}
#      - join_network: {funds: 10, initial_channel_target: 3, joinable_funds_target: 0.5}
#      - parallel:
#          tasks:
#            # Need to use actual offsets here as they are formatted directly into the commands
#            - stop_node: 1
#            - stop_node: 2
#            - stop_node: 3
#      - wait: 5
#      - parallel:
#          tasks:
#            # Need to use actual offsets here as they are formatted directly into the commands
#            - start_node: 1
#            - start_node: 2
#            - start_node: 3

#      - parallel:
#          repeat: 5
#          tasks:
#            - serial:
#                tasks:
#                  - transfer: {amount: 5, from: 0, to: 2}
#                  - stop_node: 1
#                  - wait: 1
#                  - start_node: 1
#            - transfer: {amount: 10, from: 1, to: 2}
#      - assert: {from: 0, to: 1, total_deposit: 100, balance: 5, state: "opened"}
#      - parallel:
#          tasks:
#            - close_channel: {from: 0, to: 1}
#            - close_channel: {from: 1, to: 2}
#      - assert: {from: 0, to: 1, total_deposit: 100, balance: 5, state: "closed"}

# Status code matching (int or regex):
#      - open_channel: {from: 0, to: 1}
#      - open_channel: {from: 0, to: 1, expected_http_status: 409}
#      - open_channel: {from: 0, to: 1, expected_http_status: '4.9'}
