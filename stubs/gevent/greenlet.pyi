from sys import _OptExcInfo
from typing import Any, Callable, Collection, Dict, Generic, Optional, Tuple, TypeVar

from typing_extensions import Protocol

RawlinkCallback = Callable[["Greenlet", Any], None]
T = TypeVar("T")

class WaitProtocol(Protocol):
    def rawlink(self, callback: RawlinkCallback): ...
    def unlink(self, callback: RawlinkCallback): ...

def joinall(
    greenlets: Collection[WaitProtocol],
    timeout: float = None,
    raise_error: bool = False,
    count: int = None,
): ...

class Greenlet(Generic[T]):
    name: str
    dead: bool
    value: Optional[T]
    exception: Optional[Exception]
    exc_info: _OptExcInfo
    args: Tuple[Any]
    kwargs: Dict[str, Any]
    def __init__(self, run: Callable = None, *args: Any, **kwargs: Any) -> None: ...
    def ready(self) -> bool: ...
    def successful(self) -> bool: ...
    def throw(self, *args: Any) -> None: ...
    def start(self) -> None: ...
    def start_later(self, seconds: float): ...
    @classmethod
    def spawn(cls, *args: Any, **kwargs: Any) -> "Greenlet": ...
    @classmethod
    def spawn_later(cls, seconds: float, *args: Any, **kwargs: Any) -> "Greenlet": ...
    def kill(
        self, exception: Exception = ..., block: bool = True, timeout: float = None
    ) -> None: ...
    def get(self, block: bool = True, timeout: float = None) -> T: ...
    def join(self, timeout: float = None) -> None: ...
    def run(self) -> None: ...
    def has_links(self) -> bool: ...
    def rawlink(self, callback: RawlinkCallback): ...
    def link(self, callback: Callable, SpawnedLink: Callable = ...) -> None: ...
    def unlink(self, callback: RawlinkCallback): ...
    def unlink_all(self) -> None: ...
    def link_value(self, callback: Callable, SpawnedLink: Callable = ...): ...
    def link_exception(self, callback: Callable, SpawnedLink: Callable = ...): ...
