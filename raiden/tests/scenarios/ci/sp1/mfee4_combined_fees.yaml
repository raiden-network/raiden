version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      url: https://pfs-goerli-with-fee.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_min: 100_000_000_000_000_000_000
  balance_fund: 100_000_000_000_000_000_000

nodes:
  mode: managed
  count: 4
  raiden_version: local

  default_options:
    log-memory-usage-interval: "2"
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    flat-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 100
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 10_000  # 1% proportional fee
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 20_000  # 2% imbalance fee on channel balance
    no-cap-mediation-fees: true

## This is the MFEE4 scenario. It creates a network with topology 0 -> 1 -> 2 -> 3 and checks
## whether a path is returned. It also checks that correct fees are deducted.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 1, to: 0, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 2, to: 1, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 2, to: 3, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 3, to: 2, total_deposit: 1_000_000_000_000_000_000}
      - serial:
          name: "Test providing routes"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 0, to: 3, amount: 500_000_000_000_000_000, expected_http_status: 200}
            - wait_blocks: 1  # Wait for balances being up to date

            ## Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 3
                expected_routes:
                  - [0, 1, 2, 3]

            # This calculation is too complicated to follow it manually. You
            # can inspect the precise intermediate values in `test_mfee4` if necessary.
            # Very rough calculation:
            # Imbalance fees: 2 * 2 * 500e15 * 2% = 40e15
            # Flat fees: 2 * 100 = 200
            # Proportional fees: 2 * 500e15 * 1% = 10e15
            # Total fees: 40e15 + 200 + 10e15 = 50e15
            # Margin: 50e15 * 3% + 500e15 * 0.05% = 1.5e15 + 0.25e15 = 1.525e15
            # Amount sent by initiator: 500e15 + 50e15 + 1.525e15 = 551e15
            - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 456_496_933_858_494_449, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 1_000_000_000_000_000_000, balance: 1_543_503_066_141_505_551, state: "opened"}

            - assert: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 478_587_602_916_613_423, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 1_521_412_397_083_386_577, state: "opened"}

            - assert: {from: 2, to: 3, total_deposit: 1_000_000_000_000_000_000, balance: 498_743_132_371_418_303, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 1_501_256_867_628_581_697, state: "opened"}
