version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      url: https://pfs-goerli-with-fee.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_min: 100_000_000_000_000_000_000
  balance_fund: 100_000_000_000_000_000_000

nodes:
  mode: managed
  count: 3
  raiden_version: local

  default_options:
    log-memory-usage-interval: "2"
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    flat-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 10_000  # 1% imbalance fee on channel balance
    no-cap-mediation-fees: true

# Make a transfer over a single mediator with enabled imbalance fees. The
# channels start at maximum imbalance, which causes negative fees. To test this,
# the mediator fee capping has been turned off.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000}
            - open_channel: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000}
      - serial:
          name: "Test providing routes"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 0, to: 2, amount: 500_000_000_000_000_000, expected_http_status: 200}
            - wait_blocks: 1  # Wait for balances being up to date

            ## Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 2
                expected_routes:
                  - [0, 1, 2]

            # -2000 TKN fees are calculated, but the actual value is closer to zero because
            # 1. Due to the negative fee less tokens are transferred, resulting in a smaller negative fee
            # 2. A fee margin is applied
            - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 519_149_961_200_077_600, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 480_850_038_799_922_400, state: "opened"}

            - assert: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 499_150_001_199_997_600, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 500_849_998_800_002_400, state: "opened"}
