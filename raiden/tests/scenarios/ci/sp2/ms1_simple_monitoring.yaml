version: 2

settings:
  gas_price: "fast"
  # Adapt to chain used
  chain: any
  services:
    pfs:
      url: https://pfs-goerli.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true
        # Make sure that enough is deposited to pay for an MR
        # The cost of an MR is `5 * 10 ** 18`
        balance_per_node: 7_000_000_000_000_000_000
        min_balance: 5_000_000_000_000_000_000

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_fund: 10_000_000_000_000_000_000

nodes:
  mode: managed
  count: 2
  raiden_version: local

  default_options:
    log-memory-usage-interval: "2"
    gas-price: fast
    environment-type: development
    enable-monitoring: true
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    default-settle-timeout: 40
    default-reveal-timeout: 20

# This is the MS1 scenario. A channel between two nodes is opened, a transfer is made. Then, node1 goes offline
# and node0 closes the channel. The last assert checks whether the monitoring service interferes and received its reward.

scenario:
  serial:
    tasks:
      - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000}
      - transfer: {from: 0, to: 1, amount: 500_000_000_000_000_000, expected_http_status: 200}
      ## Wait for Monitor Request to be sent
      - wait_blocks: 1
      - store_channel_info: {from: 0, to: 1, key: "MS Test Channel"}
      - stop_node: 1
      - close_channel: {from: 0, to: 1}
      ## Wait for channel to be closed
      - wait_blocks: 1
      - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 500_000_000_000_000_000, state: "closed"}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "ChannelClosed"
          num_events: 1
          event_args: {closing_participant: 0}

      ## The MS reacts within the settle_timeout
      - wait_blocks: 40
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "NonClosingBalanceProofUpdated"
          num_events: 1
          event_args: {closing_participant: 0}

      ## Monitored channel must be settled before the monitoring service can claim its reward
      ## Settlement timeout is 500, but we've already waited 400 blocks, leaving 100 blocks
      ## To make sure the transactions gets mined in time, 10 additional blocks are added
      - wait_blocks: 10
      - assert_ms_claim: {channel_info_key: "MS Test Channel"}
