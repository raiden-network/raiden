version: 2

settings:
  gas_price: "fast"
  services:
    pfs:
      url: {{ pfs_with_fee }}
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "{{ transfer_token }}"
  balance_fund: 10_000_000_000_000_000_000

nodes:
  count: 4
  raiden_version: local

  default_options:
    gas-price: fast
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    proportional-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-imbalance-fee:
      - "{{ transfer_token }}"
      - 0

## This is the PFS6 scenario. It creates a network with topology 0 <-> 1 <-> 2 <-> 3 and
## performs some transfers in order to check that IOUs are created for the PFS that provides
## the path.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 201}
            - open_channel: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 201}
            - open_channel: {from: 2, to: 3, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 201}
      - serial:
          name: "Check that no IOUs exist and create one"
          tasks:
            - assert_pfs_iou: {source: 3, iou_exists: false}
            - assert_pfs_history: {source: 3, request_count: 0}

            # Node3 cannot send tokens to node0 due to imbalanced channels
            # We expect the pfs not to send any route, but to charge for the information
            # but the node can check if the direct channel is usable so we need a deposit
            - deposit: {from: 3, to: 2, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 200}
            - transfer: {from: 3, to: 0, amount: 1_000_000_000_000_000, expected_http_status: 409}
            - wait_blocks: 1
            - assert_pfs_history: {source: 3, target: 0, request_count: 1}
            - assert_pfs_iou: {source: 3, amount: 100}
            - assert_pfs_iou: {source: 2, iou_exists: false}

      - parallel:
          name: "Deposit in the other directions"
          tasks:
            - deposit: {from: 1, to: 0, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 200}
            - deposit: {from: 2, to: 1, total_deposit: 1_000_000_000_000_000_000, expected_http_status: 200}
      - serial:
          name: "Assert on all channel deposits"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}

      - serial:
          name: "More transfers and IOUs"
          tasks:
            # Now that there is a path with capacity the transfer should go through
            # and another IOU should exist
            - wait_blocks: 1
            - transfer: {from: 3, to: 0, amount: 1_000_000_000_000_000, expected_http_status: 200}
            - wait_blocks: 1
            - assert_pfs_history: {source: 3, target: 0, request_count: 2}
            - assert_pfs_iou: {source: 3, amount: 200}
            - assert_pfs_iou: {source: 2, iou_exists: false}
            - assert_pfs_iou: {source: 1, iou_exists: false}
            - assert_pfs_iou: {source: 0, iou_exists: false}

            # Perform a couple of more transfers
            - assert_pfs_history: {source: 0, request_count: 0}
            - transfer: {from: 0, to: 3, amount: 1_000_000_000_000_000, expected_http_status: 200}
            - wait: 10
            - assert_pfs_history: {source: 0, target: 3, request_count: 1}
            - assert_pfs_iou: {source: 0, amount: 100}
            - assert_pfs_iou: {source: 1, iou_exists: false}
            - assert_pfs_iou: {source: 2, iou_exists: false}
            - assert_pfs_iou: {source: 3, amount: 200}

            - transfer: {from: 2, to: 0, amount: 1_000_000_000_000_000, expected_http_status: 200}
            - wait: 10
            - assert_pfs_history: {source: 2, target: 0, request_count: 1}
            - assert_pfs_iou: {source: 2, amount: 100}

      - serial:
          name: "Assert on all channel balances after transfers"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 1_001_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 1_000_000_000_000_000_000, balance: 999_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 1_001_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 999_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 1_000_000_000_000_000_000, balance: 1_000_000_000_000_000_000, state: "opened"}
