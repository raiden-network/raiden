version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      # url: https://pfs-kovan.services-dev.raiden.network
      url: http://localhost:6000
    udc:
      enable: true
      token:
        deposit: true

token:

nodes:
  mode: managed
  count: 5
  ## add path to Raiden virtual env

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-eth-address: "0x0bae0289aaa26845224f528f9b9defe69e01606e"
    pathfinding-max-fee: 10

## This is the PFS5 scenario. It creates a network with topology A <-> B <-> C <-> D and A <-> E <-> D
## where AED doesn't have enough capacity to do the transfer.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 1000}
            - open_channel: {from: 1, to: 2, total_deposit: 1000}
            - open_channel: {from: 2, to: 3, total_deposit: 1000}
            # Setup alternative (best) path
            - open_channel: {from: 0, to: 4, total_deposit: 1000}
            - open_channel: {from: 4, to: 3, total_deposit: 5}
      - serial:
          name: "Test providing routes"
          tasks:
            # Check that the PFS returns two paths from A to D
            - assert_pfs_routes: {from: 0, to: 3, amount: 10, expected_paths: 1}

            ## Check that the paths are indeed the expected ones
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 3
                expected_routes:
                  - [0, 1, 2, 3]
