version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      url: https://pfs-goerli-with-fee.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:

nodes:
  mode: managed
  count: 4
  raiden_version: local

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    proportional-fee: 100_000  # 10%

## This is the MFEE1 scenario. It creates a network with topology 0 -> 1 -> 2 -> 3 and checks
## whether a path is returned. It also checks that correct proportional mediation fees
## are deducted.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 10000}
            - open_channel: {from: 1, to: 2, total_deposit: 10000}
            - open_channel: {from: 2, to: 3, total_deposit: 10000}
      # - parallel:
      #     name: "Deposit in the other directions"
      #     tasks:
      #       - deposit: {from: 1, to: 0, total_deposit: 10000}
      #       - deposit: {from: 2, to: 1, total_deposit: 10000}
      #       - deposit: {from: 3, to: 2, total_deposit: 10000}
      - serial:
          name: "Test providing routes"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 0, to: 3, amount: 1000, expected_http_status: 200}

            ## Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 3
                expected_routes:
                  - [0, 1, 2, 3]

            # Take fee margin into account
            # 1000 / 0.9 / 0.9
            - assert: {from: 0, to: 1, total_deposit: 10000, balance: 8766, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 1234, state: "opened"}

            # 1000 / 0.9
            - assert: {from: 1, to: 2, total_deposit: 10000, balance: 8889, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 1111, state: "opened"}

            - assert: {from: 2, to: 3, total_deposit: 10000, balance: 9000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 0, balance: 1000, state: "opened"}
