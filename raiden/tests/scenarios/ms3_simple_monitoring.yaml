version: 2

settings:
  gas_price: "fast"
  # Adapt to chain used
  chain: any
  services:
    pfs:
      url: https://pfs-goerli.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true
        # Make sure that enough is deposited to pay for an MR
        # The cost of an MR is `5 * 10 ** 18`
        balance_per_node: 7_000_000_000_000_000_000
        min_balance: 5_000_000_000_000_000_000

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"

nodes:
  mode: managed
  count: 2
  raiden_version: local

  default_options:
    gas-price: fast
    environment-type: development
    enable-monitoring: true

# This is the MS3 scenario. A channel between two nodes is opened, a transfer is made. Then, node1 goes offline
# and node0 closes the channel. Before the monitoring trigger block is passed node1 gets back online.
# Node1 should be able to call close itself and there should be no reward for the ms

scenario:
  serial:
    tasks:
      - open_channel: {from: 0, to: 1, total_deposit: 1000}
      - transfer: {from: 0, to: 1, amount: 500, expected_http_status: 200}
      ## Wait for Monitor Request to be sent
      - wait_blocks: 1
      - store_channel_info: {from: 0, to: 1, key: "MS Test Channel"}
      - stop_node: 1
      - close_channel: {from: 0, to: 1}
      ## Wait for channel to be closed
      - wait_blocks: 1
      - assert: {from: 0 ,to: 1, total_deposit: 1000, balance: 500, state: "closed"}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "ChannelClosed"
          num_events: 1
          event_args: {closing_participant: 0}

      ## node1 gets back online before the MS reacts
      ## node1 should call updateNonClosingBalanceProof in this case and the MS wont react
      - wait_blocks: 20
      - start_node: 1

      ## The MS reacts after 0.8 * settle_timeout at the latest. 0.8 * 500 = 400
      ## But we just need to check for the event from node1 before the monitoring service reacts
      - wait_blocks: 20
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "NonClosingBalanceProofUpdated"
          num_events: 1
          event_args: {closing_participant: 0}

      ## Monitored channel must be settled before the monitoring service can claim its reward
      ## Settlement timeout is 500 blocks -> 500 * 15s in Kovan = 7500s
      - wait_blocks: 461
      # will fail for now since channel was closed by node1. We should add functionality to assert a fail
      - assert_ms_claim: {channel_info_key: "MS Test Channel", must_claim: False}
