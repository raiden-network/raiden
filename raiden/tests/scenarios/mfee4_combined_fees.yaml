version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      url: https://pfs-goerli-with-fee.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_min: 1_000_000
  balance_fund: 1_000_000

nodes:
  mode: managed
  count: 4
  raiden_version: local

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    flat-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 100
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 10_000  # 1% proportional fee
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 10_000  # 1% imbalance fee on channel balance

## This is the MFEE4 scenario. It creates a network with topology 0 -> 1 -> 2 -> 3 and checks
## whether a path is returned. It also checks that correct fees are deducted.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 100_000}
            - open_channel: {from: 1, to: 0, total_deposit: 100_000}
            - open_channel: {from: 1, to: 2, total_deposit: 100_000}
            - open_channel: {from: 2, to: 1, total_deposit: 100_000}
            - open_channel: {from: 2, to: 3, total_deposit: 100_000}
            - open_channel: {from: 3, to: 2, total_deposit: 100_000}
      - serial:
          name: "Test providing routes"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 0, to: 3, amount: 10_000, expected_http_status: 200}

            ## Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 3
                expected_routes:
                  - [0, 1, 2, 3]

            # 487 TKN fees are calculated, 5% margin of that is 24 TKN
            # This results in a total fee of 511
            - assert: {from: 0, to: 1, total_deposit: 100_000, balance: 89_489, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000, balance: 11_0511, state: "opened"}

            # 511 TKN fees
            - assert: {from: 1, to: 2, total_deposit: 100_000, balance: 89_737, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000, balance: 11_0263, state: "opened"}

            # 263 TKN fees
            - assert: {from: 2, to: 3, total_deposit: 100_000, balance: 89_980, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 100_000, balance: 110_020, state: "opened"}
