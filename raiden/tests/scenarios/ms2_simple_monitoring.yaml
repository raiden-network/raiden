version: 2

settings:
  gas_price: "fast"
  # Adapt to chain used
  services:
    pfs:
      url: {{ pfs_with_fee }}
    udc:
      enable: true
      token:
        deposit: true
        balance_per_node: {{ ms_reward_with_margin }}

token:
  address: "{{ transfer_token }}"
  balance_fund: 10_000_000_000_000_000_000

nodes:
  count: 2
  raiden_version: local

  default_options:
    gas-price: fast
    enable-monitoring: true
    proportional-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-imbalance-fee:
      - "{{ transfer_token }}"
      - 0
    default-settle-timeout: {{ settlement_timeout_min }}
    default-reveal-timeout: 20

# This is the MS2 scenario. A channel between two nodes is opened, a transfer is made. Then, node1 goes offline
# and node0 closes the channel. After the monitoring trigger block is passed node1 gets back online.

scenario:
  serial:
    tasks:
      - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000}
      - transfer: {from: 0, to: 1, amount: 500_000_000_000_000_000, expected_http_status: 200}
      ## Wait for Monitor Request to be sent
      - wait_blocks: 1
      - store_channel_info: {from: 0, to: 1, key: "MS Test Channel"}
      - stop_node: 1
      - close_channel: {from: 0, to: 1}
      ## Wait for channel to be closed
      - wait_blocks: 10
      - assert: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 500_000_000_000_000_000, state: "closed"}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "ChannelClosed"
          num_events: 1
          event_args: {closing_participant: 0}

      ## The MS reacts within the settle_timeout
      - wait_blocks: {{ settlement_timeout_min }}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "NonClosingBalanceProofUpdated"
          num_events: 1
          event_args: {closing_participant: 0}

      ## Node1 gets back online after the MS has reacted.
      ## The MS should claim the reward
      - start_node: 1

      ## Monitored channel must be settled before the monitoring service can claim its reward
      ## To make sure the transactions gets mined in time, 10 additional blocks are added
      - wait_blocks: 10
      - assert_ms_claim: {channel_info_key: "MS Test Channel"}
