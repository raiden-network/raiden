# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from raiden.resolver import resolver_pb2 as raiden_dot_resolver_dot_resolver__pb2


class HashResolverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ResolveHash = channel.unary_unary(
        '/HashResolver/ResolveHash',
        request_serializer=raiden_dot_resolver_dot_resolver__pb2.ResolveRequest.SerializeToString,
        response_deserializer=raiden_dot_resolver_dot_resolver__pb2.ResolveResponse.FromString,
        )


class HashResolverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ResolveHash(self, request, context):
    """ResolveHash is used by LND to request translation of Rhash to a pre-image.
    the resolver may return the preimage and error indicating that there is no
    such hash/deal
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HashResolverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ResolveHash': grpc.unary_unary_rpc_method_handler(
          servicer.ResolveHash,
          request_deserializer=raiden_dot_resolver_dot_resolver__pb2.ResolveRequest.FromString,
          response_serializer=raiden_dot_resolver_dot_resolver__pb2.ResolveResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'HashResolver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
